/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export declare namespace CharityTracker {
  export type DonationStruct = {
    donor: PromiseOrValue<string>;
    amount: PromiseOrValue<BigNumberish>;
    timestamp: PromiseOrValue<BigNumberish>;
  };

  export type DonationStructOutput = [string, BigNumber, BigNumber] & {
    donor: string;
    amount: BigNumber;
    timestamp: BigNumber;
  };

  export type ExpenseStruct = {
    description: PromiseOrValue<string>;
    amount: PromiseOrValue<BigNumberish>;
    timestamp: PromiseOrValue<BigNumberish>;
  };

  export type ExpenseStructOutput = [string, BigNumber, BigNumber] & {
    description: string;
    amount: BigNumber;
    timestamp: BigNumber;
  };
}

export interface CharityTrackerInterface extends utils.Interface {
  functions: {
    "donate()": FunctionFragment;
    "donations(uint256)": FunctionFragment;
    "expenses(uint256)": FunctionFragment;
    "getBalance()": FunctionFragment;
    "getDonations()": FunctionFragment;
    "getExpenses()": FunctionFragment;
    "owner()": FunctionFragment;
    "withdrawFunds(address,uint256,string)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "donate"
      | "donations"
      | "expenses"
      | "getBalance"
      | "getDonations"
      | "getExpenses"
      | "owner"
      | "withdrawFunds"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "donate", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "donations",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "expenses",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDonations",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getExpenses",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdrawFunds",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;

  decodeFunctionResult(functionFragment: "donate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "donations", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "expenses", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getBalance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getDonations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getExpenses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFunds",
    data: BytesLike
  ): Result;

  events: {
    "DonationReceived(address,uint256,uint256)": EventFragment;
    "FundsWithdrawn(address,uint256,string,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DonationReceived"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FundsWithdrawn"): EventFragment;
}

export interface DonationReceivedEventObject {
  donor: string;
  amount: BigNumber;
  timestamp: BigNumber;
}
export type DonationReceivedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  DonationReceivedEventObject
>;

export type DonationReceivedEventFilter =
  TypedEventFilter<DonationReceivedEvent>;

export interface FundsWithdrawnEventObject {
  recipient: string;
  amount: BigNumber;
  description: string;
  timestamp: BigNumber;
}
export type FundsWithdrawnEvent = TypedEvent<
  [string, BigNumber, string, BigNumber],
  FundsWithdrawnEventObject
>;

export type FundsWithdrawnEventFilter = TypedEventFilter<FundsWithdrawnEvent>;

export interface CharityTracker extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CharityTrackerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    donate(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    donations(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber] & {
        donor: string;
        amount: BigNumber;
        timestamp: BigNumber;
      }
    >;

    expenses(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber] & {
        description: string;
        amount: BigNumber;
        timestamp: BigNumber;
      }
    >;

    getBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    getDonations(
      overrides?: CallOverrides
    ): Promise<[CharityTracker.DonationStructOutput[]]>;

    getExpenses(
      overrides?: CallOverrides
    ): Promise<[CharityTracker.ExpenseStructOutput[]]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    withdrawFunds(
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      description: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  donate(
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  donations(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber] & {
      donor: string;
      amount: BigNumber;
      timestamp: BigNumber;
    }
  >;

  expenses(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber] & {
      description: string;
      amount: BigNumber;
      timestamp: BigNumber;
    }
  >;

  getBalance(overrides?: CallOverrides): Promise<BigNumber>;

  getDonations(
    overrides?: CallOverrides
  ): Promise<CharityTracker.DonationStructOutput[]>;

  getExpenses(
    overrides?: CallOverrides
  ): Promise<CharityTracker.ExpenseStructOutput[]>;

  owner(overrides?: CallOverrides): Promise<string>;

  withdrawFunds(
    recipient: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    description: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    donate(overrides?: CallOverrides): Promise<void>;

    donations(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber] & {
        donor: string;
        amount: BigNumber;
        timestamp: BigNumber;
      }
    >;

    expenses(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber] & {
        description: string;
        amount: BigNumber;
        timestamp: BigNumber;
      }
    >;

    getBalance(overrides?: CallOverrides): Promise<BigNumber>;

    getDonations(
      overrides?: CallOverrides
    ): Promise<CharityTracker.DonationStructOutput[]>;

    getExpenses(
      overrides?: CallOverrides
    ): Promise<CharityTracker.ExpenseStructOutput[]>;

    owner(overrides?: CallOverrides): Promise<string>;

    withdrawFunds(
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      description: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "DonationReceived(address,uint256,uint256)"(
      donor?: PromiseOrValue<string> | null,
      amount?: null,
      timestamp?: null
    ): DonationReceivedEventFilter;
    DonationReceived(
      donor?: PromiseOrValue<string> | null,
      amount?: null,
      timestamp?: null
    ): DonationReceivedEventFilter;

    "FundsWithdrawn(address,uint256,string,uint256)"(
      recipient?: PromiseOrValue<string> | null,
      amount?: null,
      description?: null,
      timestamp?: null
    ): FundsWithdrawnEventFilter;
    FundsWithdrawn(
      recipient?: PromiseOrValue<string> | null,
      amount?: null,
      description?: null,
      timestamp?: null
    ): FundsWithdrawnEventFilter;
  };

  estimateGas: {
    donate(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    donations(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    expenses(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBalance(overrides?: CallOverrides): Promise<BigNumber>;

    getDonations(overrides?: CallOverrides): Promise<BigNumber>;

    getExpenses(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawFunds(
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      description: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    donate(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    donations(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    expenses(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getDonations(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getExpenses(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawFunds(
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      description: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
